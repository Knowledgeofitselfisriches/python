
   学习原则
	短期目标(javascript python 语言)优先原则，以获得短暂的成就感，缓解长期学习的疲惫
        长期目标(数据结构与算法，操作系统等计算机通用底层知识)坚持为主，每天以额外时间补充枯燥难懂的计算机基础知识、
	当学习到一定的时候，可以尝试着对过去的东西，进行一些总结，让大脑重新记忆
			也可留作未来的一种参考。
	每当无法静下心来时，也许敲一遍优美的英文文章是一种不错的选择
          当你的每天被知识所拥抱时，无关coding的一切都不会再吸引你的眼球

 	做任何事都需要先尝试再说不行，不要事先就否定，这会让你错失很多可能，
	在一个领域有足够深的积累之后，不然一切都只是浮于表面的，过分的轻浮
	一个能宽容，不计较他人的一切，才是一个坚强，能承担一切的人
	无能懦弱的人，才会在回忆之中，不断忏悔。却没有行动去改变现状

	英语单词
	数据结构与算法
 	预习
	复习 正则


       1.以课堂知识为主，作业为主的练习，以廖雪峰的教程作为补充，以官方文档为权威
       2.算法，正则 ，英语单词 ，利用python作数据分析
    
不要过分炫耀自己的事情， 多关心他人的事情，站在他人的立场上想问题，多夸赞他人，
		


    git/subversion markdown  office
	
   每日  问题总结

   4.27   1.文字和div   水平垂直居中对齐  双飞翼布局
   4.28    位运算的妙用
   5.03   dingo项目 深度复制 内存优化 代码优化 delete 与null的区别
          css3最新文档
   5.04 oreilly ECMASCRIPT6 网景 Unicode编码表 NFC RTSD BLUETHOOTH 语音识别和大数据 argument
   5.08 HTML文档树生成 浏览器渲染过程  innerHtml innerText textContent Document.write textNode src/href 深层复制
   5.09 禁用cookie 浏览器缓存 session bom对象 mouseclick的属性列表 瀑布流 懒加载 预加载 轮播图 visual studio code
   5.11 mouseEvent 的事件机制 冒泡机制 图片拖拽
   5.12 放大镜的拖拽是最终版 Event对象不会带有相关数据 MouseEvent 会有高度的信息
   5.14 Object.create();window.$ typeof怎么判断 closure; in 运算 遍历 原型链图画出来 js对象完整复制
   5.15 Object方法 window.name getter/setter  寻径算法 caller callee方法使用 __proto__
 ES5中的Object.getPrototypeOf()方法可以获取一个已经存在的实例对象的prototype对象
碎片化应用  
   23种设计模式design pattern
   05.18 reg.exec
   
   05.22 短链接 客户端发送数据，并得到回执信息， 断开链接，关闭连接后，服务端无法找到客户端
         长连接 客户端发长连接请求，服务端与客户端保持长时间的实时的通信
   
   通信协议 
         短链接 http/https
         长连接 socket
   05.23 js h5前端面试题 轮播图 网页 递归实现对象转换成字符串
     	 同步
 	异步
      原生ajax 消息头  消息队列模式  写一个函数清除setinterval 对象 事件
代码片段 ---
   1.colse 按钮
   2.轮播图 面向对象版
   3.瀑布流 预加载
   4.拖拽
   5.碰撞
   6.菜单
   7.随机颜色
   8.数组去重
   9.消息队列机制
  10.ajax服务 
   
   
        日记 github markdown 博客 读书 
	精灵图问题   图片的本地大小与在内存的大小区别
        

	 flv格式
         css预处理脚本.less sass 预编译css css media query   Normalize.css                                                     
	 checkout svn   github display:flex ; 
         网页的布局   预习 
         切图九宫格 圆角矩形 ps视频教程 如何css中导入字体库 
         浏览器如何设置书签执行了生么操作  
         如何制作精灵图，如何（sprite）图片的怎么压缩问题 
         块状容器 p div li h1-h6 ul ol dl 独占一行 可设置宽高，对齐 
		 比特率切换标准 边加载边播放 码率
		 行内元素 没有宽高/不独占
         src : frame img script
  	 href: a base link
    
      xmind激活 ximind视频教程
      markdown 
                                                                 
  h5  animate.css特效 three.js 3d图像  webgl opengl  播放器制作 弗兰斯肯斯坦 科幻著作 
   时间管理 技术能力 充分的准备 语言表达 仪表 思考 练习 为人处世 自我控制 

长期计划每天计划一点    书籍  英语 打字能力 博客 github  有道云签到 职业规划
中期目标                xmind word ppt等文档的使用
短期优先                课程问题 扩展使用    

内存泄漏(Memory Leak) 
1. 概念： 
指你用在C语言中malloc或在Java/C++ 中new申请了一块内存，但是没有通过free或delete将或者一直占用引用没有gc，引擎内存未释放，导致这块内存一直处于占用状态 

2. 概念解释： 
内存泄露是指程序中间动态分配了内存，但在程序结束时没有释放这部分内存，从而造成那部分内存不可用的情况，重启计算机或者JVM可以解决，但也有可能再次发生内存泄露，内存泄露和硬件没有关系，它是由软件设计缺陷引起的。 

3. 内存泄漏分类： 
        1)常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。 
        2)偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。 
        3)一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，所以内存泄漏只会发生一次。 
        4)隐式内存泄漏。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。 

内存溢出(Memory Overflow） 
1. 概念： 
指你申请了10个字节的空间，但是你在这个空间写入11或以上字节的数据，就是溢出 

2. 概念解释： 
内存溢出即用户在对其数据缓冲区操作时，超过了其缓冲区的边界；尤其是对缓冲区写操作时，缓冲区的溢出很可能导致程序的异常。在java中一般是指对堆的内存申请操作出现。 

3. 内存溢出类型： 
        1)java.lang.OutOfMemoryError:PermGen space 

PermGen space 的全称是 Permanent Generation space,是指内存的永久保存区域。这块内存主要是被JVM存放Class和Meta信息的，Class在被Loader时就会被放到PermGenspace中，它和存放类实例(Instance)的Heap区域不同，GC不会在主程序运行期对PermGenspace进行清理。 

JVM由XX:PermSize设置非堆内存初始值，默认是物理内存的1/64； 
JVM由XX:MaxPermSize设置最大非堆内存的大小，默认是物理内存的1/4。 

        该错误常见场合： 
        a) 应用中有很多Class，web服务器对JSP进行pre compile时。 
        b) Webapp下用了大量的第三方jar, 其大小超过了JVM默认的大小(4M)时。 

        2)java.lang.OutOfMemoryError:Java heap space 

在JVM中如果98%的时间是用于GC且可用的Heap size 不足2%的时候将抛出此异常信息。 

JVM初始分配的内存由-Xms指定，默认是物理内存的1/64； 
JVM最大分配的内存由-Xmx指定，默认是物理内存的1/4。 

JVM内存的最大值跟操作系统有很大的关系。32位处理器虽然可控内存空间有4GB，但是具体的操作系统会给一个限制，这个限制一般是2GB-3GB（一般来说Windows系统下为1.5G-2G，Linux系统下为2G-3G），而64bit以上的处理器就不会有限制了。 

注意：如果Xms超过了Xmx值，或者堆最大值和非堆最大值的总和超过了物理内存或者操作系统的最大限制都会引起服务器启动不起来。 

        该错误常见场合： 
        a) Web上传文件时。 
        b) 开启大型文件或从数据库中一次取了太多的数据。 
总结： js 优化 变量空间 对象回收 数据处理 数据结构
  	意外的全局变量 闭包 setInterVal 递归调用
       兼容问题

    
windows 回车cr 按行lf
unix    换行lf
mac     回车cr
 截图 放大镜  数学输入面板 屏幕键盘
    
      √有道云笔记签到领取空间
	复习
   	练习
	预习
	查询
	逻辑锻炼
区块链 : 私钥随机数生成，公钥公开 
      使数据的拥有权与使用权分离	
人工智能 + IoT + 区块链 ―― 人工智能是大脑、
IoT 是个人感观、区块链为人体的血液，神经系统进行信息流转。有了人工智能的大脑、
IoT 的感官、区块链神经 + 血液系统	
ThisCrackLicenseId-{
"licenseId":"11011",
"licenseeName":"微信公众号",
"assigneeName":"裸睡的猪",
"assigneeEmail":"1113449881@qq.com",
"licenseRestriction":"",
"checkConcurrentUse":false,
"products":[
{"code":"II","paidUpTo":"2099-12-31"},
{"code":"DM","paidUpTo":"2099-12-31"},
{"code":"AC","paidUpTo":"2099-12-31"},
{"code":"RS0","paidUpTo":"2099-12-31"},
{"code":"WS","paidUpTo":"2099-12-31"},
{"code":"DPN","paidUpTo":"2099-12-31"},
{"code":"RC","paidUpTo":"2099-12-31"},
{"code":"PS","paidUpTo":"2099-12-31"},
{"code":"DC","paidUpTo":"2099-12-31"},
{"code":"RM","paidUpTo":"2099-12-31"},
{"code":"CL","paidUpTo":"2099-12-31"},
{"code":"PC","paidUpTo":"2099-12-31"}
],
"hash":"2911276/0",
"gracePeriodDays":7,
"autoProlongated":false} 

马 mrs 177 3671 0086
在现有基础上提出问题（优化）
引入知识点  
怎么用
为什么这么用（有什么好处）



